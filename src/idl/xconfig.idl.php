<?php
/**
 * Automatically generated by running "php schema.php src/idl/xconfig".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 *
 * @nolint
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP
#include <boost/shared_ptr.hpp>
#include <boost/scoped_ptr.hpp>

namespace xconfig {
class XConfig;
class XConfigNode;
}
CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
//   'taint_observer' => taint propagation information
//     array (
//       'set_mask' => which bits to set automatically
//       'clear_mask' => which bits to clear automatically
//     )
// )


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "XConfig",
    'desc'   => "Represents a configuration tree.",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

private:
  boost::shared_ptr<xconfig::XConfig> xc;

  xconfig::XConfigNode getNodeFromVariant(CVarRef key);
  Variant getValue(const xconfig::XConfigNode& node);
EOT
,
  ));

DefineConstant(array('name' => "TYPE_STRING", 'type' => Int32,));
DefineConstant(array('name' => "TYPE_BOOLEAN", 'type' => Int32,));
DefineConstant(array('name' => "TYPE_INTEGER", 'type' => Int32,));
DefineConstant(array('name' => "TYPE_FLOAT", 'type' => Int32,));
DefineConstant(array('name' => "TYPE_MAP", 'type' => Int32,));
DefineConstant(array('name' => "TYPE_SEQUENCE", 'type' => Int32,));
DefineConstant(array('name' => "DEFAULT_SOCKET", 'type' => String,));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "path",
        'type'   => String,
        'desc'   => "Path that identifies the configuration tree",
      ),
      array(
        'name'   => "socket",
        'type'   => String,
        'value'  => "null",
        'desc'   => "Socket where to find xconfig instance",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "reload",
    'desc'   => "Try to reload the configuration tree",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
    ),
  ));

DefineFunction(
  array(
    'name'   => "close",
    'desc'   => "Close the connection",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
    ),
  ));

DefineFunction(
  array(
    'name'   => "getValue",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
      array(
        'name'   => "key",
        'type'   => Variant,
        'desc'   => "Key",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getType",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Int32,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
      array(
        'name'   => "key",
        'type'   => Variant,
        'desc'   => "Key",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getMTime",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Int64Vec,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
      array(
        'name'   => "key",
        'type'   => Variant,
        'desc'   => "Key",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "isScalar",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
      array(
        'name'   => "key",
        'type'   => Variant,
        'desc'   => "Key",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "isMap",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
      array(
        'name'   => "key",
        'type'   => Variant,
        'desc'   => "Key",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "isSequence",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
      array(
        'name'   => "key",
        'type'   => Variant,
        'desc'   => "Key",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getCount",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Int64,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
      array(
        'name'   => "key",
        'type'   => Variant,
        'desc'   => "Key",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getMapKeys",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => StringVec,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
      array(
        'name'   => "key",
        'type'   => Variant,
        'desc'   => "Key",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getNode",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Object,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
      array(
        'name'   => "key",
        'type'   => Variant,
        'desc'   => "Key",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "XConfigNode",
    'desc'   => "Represents a configuration node",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  friend class c_XConfig;
private:
  boost::shared_ptr<xconfig::XConfig> xc;
  boost::scoped_ptr<xconfig::XConfigNode> node;

  void _init(boost::shared_ptr<xconfig::XConfig> xc, const xconfig::XConfigNode& n);
  const xconfig::XConfigNode& getNode() const;
  boost::shared_ptr<xconfig::XConfig> getXConfig() const;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "getParent",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Object,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
    ),
  ));

DefineFunction(
  array(
    'name'   => "getChildren",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => VariantVec,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
    ),
  ));

DefineFunction(
  array(
    'name'   => "getName",
    'desc'   => "Get the value of a configuration node",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => String,
      'desc'   => "Returns the value for a configuration node.",
    ),
    'args'   => array(
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "XConfigException",
    'parent' => "Exception",
    'desc'   => "XConfig base exception",
    'flags'  =>  IsAbstract | HasDocComment,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "message",
        'type'   => String,
        'desc'   => "The exception message",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "XConfigNotFoundException",
    'parent' => "XConfigException",
    'desc'   => "The requested config item cannot be found",
    'flags'  =>  HasDocComment,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "message",
        'type'   => String,
        'desc'   => "The exception message",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "XConfigNotConnectedException",
    'parent' => "XConfigException",
    'desc'   => "The XConfig connection is not set up",
    'flags'  =>  HasDocComment,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "message",
        'type'   => String,
        'desc'   => "The exception message",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "XConfigWrongTypeException",
    'parent' => "XConfigException",
    'desc'   => "Wrong type",
    'flags'  =>  HasDocComment,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "message",
        'type'   => String,
        'desc'   => "The exception message",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

